#!/usr/bin/env python

import bectl
import crypt
import gi
import os
import gettext
import pwd
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk

__VERSION__ = '0.3.1'

gettext.bindtextdomain('backup-station', '/usr/local/share/locale')
gettext.textdomain('backup-station')
_ = gettext.gettext


class BackupStationWindow(Gtk.Window):
    def create_be_list(self):
        data = bectl.get_be_list()
        data.pop(0)

        for element in data:
            self.liststore.append(element.split())

    def refresh_be_list(self):
        self.liststore.clear()
        self.create_be_list()
        self.treeview.grab_focus()

    def select_be(self):
        selection = self.treeview.get_selection()
        model, paths = selection.get_selected_rows()

        for path in paths:
            iter = model.get_iter(path)
            self.be_name = model.get_value(iter, 0)
            self.be_not_active = model.get_value(iter, 1)

        return self.be_name, self.be_not_active

    def create_be_window(self, button):
        dialog = DialogWindow()
        dialog.add_primary_text("Create a new boot environment")
        dialog.add_secondary_text("Please enter a name for the boot environment.")
        dialog.add_input()
        response = dialog.run()

        if response == Gtk.ResponseType.OK:
            bectl.create_be(dialog.input.get_text())
            self.refresh_be_list()

        dialog.destroy()

    def rename_be_window(self, button):
        dialog = DialogWindow()
        dialog.add_primary_text("Rename a boot environment")
        dialog.add_secondary_text("Please enter a new name for the boot environment.")
        dialog.add_input()
        response = dialog.run()

        if response == Gtk.ResponseType.OK:
            be_name = self.select_be()[0]
            bectl.rename_be(be_name, dialog.input.get_text())
            self.refresh_be_list()

        dialog.destroy()

    def activate_be(self, button):
        bename = self.select_be()[0]
        bectl.activate_be(bename)
        self.refresh_be_list()

    def delete_be(self, button):
        dialog = DialogWindow()
        dialog.add_primary_text("Delete a boot environment")
        dialog.add_secondary_text("Are you sure? This action cannot be undone.")
        response = dialog.run()

        if response == Gtk.ResponseType.OK:
            be_name, be_not_active = self.select_be()
            if (be_not_active == "-"):
                bectl.destroy_be(be_name)
                self.refresh_be_list()
            else:
                error = Gtk.Dialog("Backup Station")
                message = Gtk.Label(label="You cannot delete an active boot environment")
                message.show()
                error.vbox.pack_start(message, True, True, 5)
                error.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK)
                error.run()
                error.destroy()

        dialog.destroy()

    def mount_be(self, button):
        bename = self.select_be()[0]
        bectl.mount_be(bename)
        self.refresh_be_list()

    def umount_be(self, button):
        bename = self.select_be()[0]
        bectl.umount_be(bename)
        self.refresh_be_list()

    def __init__(self):
        super().__init__(title=_("Backup Station"))

        self.set_resizable(False)

        # Create the liststore of boot environments.
        self.liststore = Gtk.ListStore(str, str, str, str, str, str)
        self.create_be_list()
        self.treeview = Gtk.TreeView(model=self.liststore)

        # Create columns for the data
        renderer_text = Gtk.CellRendererText()
        column_text = Gtk.TreeViewColumn(_("BE name"), renderer_text, text=0)
        self.treeview.append_column(column_text)

        column_text = Gtk.TreeViewColumn(_("Active"), renderer_text, text=1)
        self.treeview.append_column(column_text)

        column_text = Gtk.TreeViewColumn(_("Mountpoint"), renderer_text, text=2)
        self.treeview.append_column(column_text)

        column_text = Gtk.TreeViewColumn(_("Space"), renderer_text, text=3)
        self.treeview.append_column(column_text)

        column_text = Gtk.TreeViewColumn(_("Date"), renderer_text, text=4)
        self.treeview.append_column(column_text)

        column_text = Gtk.TreeViewColumn(_("Time"), renderer_text, text=5)
        self.treeview.append_column(column_text)

        # Create the buttons to manipulate the BE's
        create_button = Gtk.Button.new_with_label(_("Create BE"))
        create_button.connect("clicked", self.create_be_window)

        rename_button = Gtk.Button.new_with_label(_("Rename BE"))
        rename_button.connect("clicked", self.rename_be_window)

        activate_button = Gtk.Button.new_with_label(_("Activate BE"))
        activate_button.connect("clicked", self.activate_be)

        delete_button = Gtk.Button.new_with_label(_("Delete BE"))
        delete_button.connect("clicked", self.delete_be)

        mount_button = Gtk.Button.new_with_label(_("Mount BE"))
        mount_button.connect("clicked", self.mount_be)

        umount_button = Gtk.Button.new_with_label(_("Unmount BE"))
        umount_button.connect("clicked", self.umount_be)

        # Create boxes to hold the treeview columns and the row of buttons
        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        hbox.pack_start(create_button, True, True, 2)
        hbox.pack_start(rename_button, True, True, 2)
        hbox.pack_start(delete_button, True, True, 2)
        hbox.pack_start(activate_button, True, True, 2)
        hbox.pack_start(mount_button, True, True, 2)
        hbox.pack_start(umount_button, True, True, 2)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        vbox.pack_start(self.treeview, True, True, 2)
        vbox.pack_start(hbox, True, True, 2)
        self.add(vbox)
        self.connect("destroy", Gtk.main_quit)


class DialogWindow(Gtk.Dialog):
    def add_input(self):
        self.input = Gtk.Entry()
        hbox = Gtk.HBox(homogeneous=False, spacing=0)
        hbox.pack_start(self.input, True, True, 20)
        self.update_content_area(hbox)

    def add_primary_text(self, text):
        self.primary_text = Gtk.Label()
        self.primary_text.set_markup(f'<span size="large">{text}</span>')
        self.update_content_area(self.primary_text)

    def add_secondary_text(self, text):
        self.secondary_text = Gtk.Label()
        self.secondary_text.set_text(text)
        self.update_content_area(self.secondary_text)

    def update_content_area(self, widget):
        self.vbox.pack_start(widget, True, True, 5)
        self.vbox.show_all()

    def __init__(self):
        Gtk.Dialog.__init__(self)
        self.transient_for = self,
        self.title = self.set_title("Backup Station"),
        self.add_buttons(
            Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
            Gtk.STOCK_OK, Gtk.ResponseType.OK,
        )
        self.set_size_request(300, 80)


class confirmation(Gtk.Window):
    def confirm_passwd(self, widget, user):
        pwd_hash = pwd.getpwnam(user).pw_passwd
        password = self.passwd.get_text()
        if crypt.crypt(password, pwd_hash) == pwd_hash:
            self.hide()
            BackupStationWindow().show_all()
        else:
            dialog = DialogWindow()
            dialog.add_primary_text("Entered wrong password")
            dialog.add_secondary_text("Would you like to try again?")
            response = dialog.run()

            if response == Gtk.ResponseType.OK:
                self.passwd.grab_focus()
                dialog.destroy()
                self.show()
            else:
                Gtk.main_quit()

    def __init__(self, user):
        Gtk.Window.__init__(self)
        self.set_title(_("Backup Station"))
        self.set_resizable(False)
        self.connect("delete-event", Gtk.main_quit)
        self.set_size_request(300, 80)
        vBox = Gtk.VBox(homogeneous=False, spacing=0)
        self.add(vBox)
        vBox.show()
        label = _("Confirm password for")
        label = Gtk.Label(label=label + f" {user}")
        vBox.pack_start(label, True, True, 5)
        self.passwd = Gtk.Entry()
        self.passwd.set_visibility(False)
        self.passwd.connect("activate", self.confirm_passwd, user)
        self.passwd.caps_lock_warning = True
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        hBox.show()
        vBox.pack_start(hBox, False, False, 5)
        hBox.pack_start(self.passwd, True, True, 20)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        hBox.show()
        vBox.pack_end(hBox, False, False, 5)
        ok_button = Gtk.Button()
        ok_button.set_label("OK")
        apply_img = Gtk.Image()
        apply_img.set_from_icon_name('gtk-ok', 1)
        ok_button.set_image(apply_img)
        ok_button.connect("clicked", self.confirm_passwd, user)
        hBox.pack_end(ok_button, False, False, 5)
        self.show_all()


if os.geteuid() == 0:
    user = os.getenv("SUDO_USER")
    if user is None:
        BackupStationWindow()
    else:
        confirmation(user)
else:
    dialog = DialogWindow()
    dialog.add_primary_text("Backup Station must be run with root privileges")
    dialog.add_secondary_text("Would you like to use sudo?")
    response = dialog.run()

    if response == Gtk.ResponseType.OK:
        os.popen("sudo backup-station")
    exit()

Gtk.main()
